#!/bin/sh

# † Scientia es lux principium✨ ™

# Copyright © 2020 Luxcium (Benjamin Vincent Kasapoglu)

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# « †Scientia es lux principium✨ » IS A TRADEMARK OF BENJAMIN VINCENT KASAPOGLU
# (™ & © 2016-2020 ALL RIGHT RESERVED)

# Help
# ==============================================================================≈
Help() {
  # Display Help
  echo "Loop through each sub-directory and dot-directory in a directory."
  echo
  echo "Syntax: foreachdirdo [-H|h|L|l|V|v] [<before>|<after>|<justBefore>|<justAfter>]"
  echo
  echo "options:"
  echo "-H or -h      Print this Help."
  echo "-L or -l      Print the MIT license notification."
  echo "-V or -v      Print software version and exit."
  echo
  echo "Will produce a string and evaluate it with the ITEM placed in the middle"
  echo "BEFORE__JUSTBEFORE-ITEM-JUSTAFTER__AFTER"
  echo "Where '__' represent a blank space and '-' represent no space at all"
  echo "use empty string to bypass i.e. \"\" or \'\' if you need to skip to next"
  echo
  echo "before       Command will be placed before folowed by a space."
  echo "after        Command will be placed after preceded by a space."
  echo "justBefore   Command will be placed directly before whitout space."
  echo "justAfter    Command will be placed directly after whitout space."
  echo
  echo -e '\e[31m†Scientia es lux principium✨ ™\e[37m'
  echo

}

License() {
  # Display License
  echo
  echo
  echo -e '\e[31m†Scientia es lux principium✨ ™\e[37m'
  echo
  echo -e "\e[37;1m\e[1mCopyright © 2020 Luxcium (Benjamin Vincent Kasapoglu)"
  echo -e "\e[22m\e[37m"
  echo "Permission is hereby granted, free of charge, to any person obtaining a copy"
  echo "of this software and associated documentation files (the \"Software\"), to deal"
  echo "in the Software without restriction, including without limitation the rights"
  echo "to use, copy, modify, merge, publish, distribute, sublicense, and/or sell"
  echo "copies of the Software, and to permit persons to whom the Software is"
  echo "furnished to do so, subject to the following conditions:"
  echo
  echo "The above copyright notice and this permission notice shall be included in"
  echo "all copies or substantial portions of the Software."
  echo
  echo -e "\e[37;1m\e[1mTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR"
  echo "IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,"
  echo "FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE"
  echo "AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER"
  echo "LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,"
  echo "OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE"
  echo "SOFTWARE."
  echo -e "\e[22m\e[37m"
  echo "« †Scientia es lux principium✨ » IS A TRADEMARK OF BENJAMIN VINCENT KASAPOGLU"
  echo "(™ & © 2016-2020 ALL RIGHT RESERVED)"
  echo
  echo -e '\e[0m'

}

Version() {
  # Display License
  echo "v0.0.1"
  echo
  echo -e '\e[31m†Scientia es lux principium✨ ™\e[37m'
}

# Main program                                                                 #
# ==============================================================================≈

# Process the input options. Add options as needed.                            #
# ==============================================================================≈
# Get the options

#  getopts chaîne_d_options nom [arguments]
# getopts  est  utilise par les scripts shell pour analyser les
# paramètres positionnels. La chaîne_d_options contient l'ensemble des
# lettres d'options à reconnaître. Si une lettre est suivie par un
# deux-points
# (:), l'option est censée comprendre un argument, qui peut en
# être séparé par une espace. À chaque invocation, getopts place l'option
# suivante dans la variable shell dont le nom est fourni, en  la  créant  si
# elle  n'existe  pas. Il place également l'index de l'argument
# suivant à analyser dans la variable OPTIND. OPTIND est initialisé à 1
# à chaque lancement d'un shell ou d'un script. Quand une option
# nécessite un
# argument, getopts place celui-ci dans la variable OPTARG.
#  Le shell ne réinitialise pas OPTIND automatiquement, il faut le faire
#  manuellement si des appels multiples à getopts au sein du même shell
#  utilisent
# des ensembles différents de paramètres.

# Lorsque la fin des options est atteinte, getopts se termine
# avec un code de retour supérieur à zéro. OPTIND est rempli avec le rang
# du premier argument non-option, et nom contient '?'.
#
# getopts analyse en principe les paramètres positionnels, mais
# si d'autres arguments lui sont transmis, getopts analysera ces derniers.
#
# getopts  peut renvoyer des erreurs de deux manières. Si le
# premier caractère de la chaîne_d_options est un deux-points, les erreurs
# sont renvoyées de manière silencieuse. Lors d'un fonctionnement normal,
# des
# messages de diagnostique sont affichés si une option est
# illégale, ou s'il manque un argument d'option. Si la variable OPTERR
# vaut 0, aucun message d'erreur ne sera affiché, même si le premier
# caractère  de
# la chaîne_d_options n'est pas un deux-points.

# Si  une option illégale est rencontrée, getopts met un point
# d'interrogation ? dans la variable nom, affiche un message d'erreur
# (s'il n'est pas en mode silencieux), et détruit la variable OPTARG.
# Si getopts
# fonctionne en mode silencieux, le caractère d'option est
# placé dans OPTARG et aucun message de diagnostique n'est affiché.

# Lorsqu'un argument d'option est manquant, et si getopts
# n'est pas silencieux, un point d'interrogation (?) est placé dans
# la variable nom, OPTARG est détruit, et un message de diagnostique
# est  affiché.  Si

# getopts est silencieux, un deux-points (:) est placé dans
# la variable nom et OPTARG est rempli avec le caractère d'option trouvé.

# getopts renvoie la valeur Vrai si une option, prévue ou
# imprévue, est trouvée. Il renvoie Faux si la fin des options est
# atteinte, ou si une erreur se produit.

while getopts ":hHvVlL" option; do
  case $option in
  h | H) # display Help
    Help
    exit
    ;;

  v | V) # Version
    Version
    exit
    ;;

  l | L) # License
    License
    exit
    ;;

  \?) # incorrect option
    echo "Error: Invalid option"
    exit 1
    ;;
  esac
done

unset -f Help
unset -f License
unset -f Version

for d in .* *; do
  [ -d "${d}" ] && eval "${1:-'echo'} ${3}${d}${4} ${2}"
done

exit 0
